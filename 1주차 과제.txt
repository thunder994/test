1. @RestController
@Controller + @ResponseBody
@ResponseBody를 모든 메소드에서 적용한다.
메소드의 반환 결과(문자열)를 JSON 형태로 반환한다.
@Controller 와 @RestController 의 차이
@Controller
API와 view를 동시에 사용하는 경우에 사용
대신 API 서비스로 사용하는 경우는 @ResponseBody를 사용하여 객체를 반환한다.
view(화면) return이 주목적
@RestController
view가 필요없는 API만 지원하는 서비스에서 사용 (Spring 4.0.1부터 제공)
@RequestMapping 메서드가 기본적으로 @ResponseBody 의미를 가정한다.
data(json, xml 등) return이 주목적
즉, @RestController = @Controller + @ResponseBody


2. @RequestMapping
@RequestMapping에 대한 모든 매핑 정보는 Spring에서 제공하는 HandlerMapping Class가 가지고 있다.
1) Class Level Mapping
모든 메서드에 적용되는 경우
“/home”로 들어오는 모든 요청에 대한 처리를 해당 클래스에서 한다는 것을 의미한다.
2) Handler Level Mapping
요청 url에 대해 해당 메서드에서 처리해야 되는 경우
“/home/employees” POST 요청에 대한 처리를 addEmployee()에서 한다는 것을 의미한다.
value: 해당 url로 요청이 들어오면 이 메서드가 수행된다.
method: 요청 method를 명시한다. 없으면 모든 http method 형식에 대해 수행된다.


3. @GetMapping
요청 url을 어떤 메서드가 처리할 것인지 매핑해주는 어노테이션
라우팅정보를 제공하며 선언한 경로의 값에 따라 HTTP 요청이 해당 메서드에 매핑되어야 하는 것을 스프링에 알림.
@RequestMapping(Method=RequestMethod.GET)과 같음. Http head에 담아 보내기 때문에 용량제한있음


4. @Service
@Service를 적용한 Class는 비지니스 로직이 들어가는 Service로 등록이 된다. 
Controller에 있는 @Autowired는 @Service("xxxService")에 등록된 xxxService와 변수명이 같아야 하며 Service에 있는 
@Autowired는 @Repository("xxxDao")에 등록된 xxDao와 변수명이 같아야 한다.
 

5. @Component
Spring이 관리하는 모든 component에 대한 기본 스테레오타입. Class를 bean으로 등록


6. @Configuration
@Bean을 해당 클래스의 메소드에 적용하면 @Autowired로 빈을 부를 수 있다.


7. @Bean
객체를 의미. Spring container에 bean을 등록하도록 하는 어노테이션
[@bean과 @component 차이점]
@bean : 개발자가 직접 제어 불가능한 외부 라이브러리등을 만들 떄 사용
@component : 개발자가 직접 작성한 class를 bean으로 등록하기 위해 사용


8. @SpringBootApplication
@Configuration,@EnableAutoConfiguration,@ComponentScan 3가지를 하나의 annotaion으로 합친 것.
스프링 부트의 핵심 어노테이션으로 메인클래스에 사용한다.


9. Lombok
 - @Getter, @Setter
   클래스 필드에 대한 getter와 setter 메서드를 생성해주고 여러 옵션으로 다양한 코드를 자동생성할 수 있다.
   Setter는 필드가 final이 아닌 필드에 대해서 메서드가 생성된다. 
 - @Data는 @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor을 
   한번에 사용하는 강력한 어노테이션.
 - @builder
   모델 객체를 생성할 때 Builder를 자동으로 추가해 주는 Annotation이다. 이를 이용하면 
   Builder Pattern을 아주 손쉽게 적용할 수 있다.
 - 실무에서 Lombok 사용법 정리
   참고url : https://cheese10yun.github.io/lombok/
   
   
10. DI(Dependency Injection)
개념 : 각 클래스 간의 의존관계를 Bean 설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것을 말함
        즉, 객체를 직접 생성하는 것이 아니라 특정 객체를 만들때 필요한 객체를 외부에서 결정 후 생성하는 것을 말함
        -Bean은 Spring IoC 컨테이너가 관리하는 객체. 의존성 주입을 위해서는 Bean이 되어야함
장점 : DI(의존성 주입)를 통해서 모듈 간의 결합도가 낮아지고 유연성이 높아짐
예시 : new 연산자로 객체를 직접 생성하는 것이 아닌 setter() 연산자 혹은 생성자를 외부에서 호출해서 객체를 생성
